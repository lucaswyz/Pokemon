programa{    
	
	inclua biblioteca Matematica
	inclua biblioteca Util
	funcao inicio()
	{

	 cadeia pokemon1, pokemon2
	 inteiro hpT = 40, hpM = 50
	 inteiro atkT = 20, atkM = 25
	 inteiro defT = 10, defM = 15
	 inteiro speedT = 70, speedM = 58
	 inteiro mov

	 pokemon1 = "Treecko"
	 pokemon2 = "Mudkip" 
	 
      escreva("Você vai lutar contra Mudkip, note que pokémon tipo grama são eficazes contra tipo água.")
      escreva("\n\nVocê escolheu o TREECKO")
      escreva("\n\nTREECKO\n\nSTATUS\nHP: ", hpT ,"\nATK: ", atkT ,"\nDEF: ", defT , "\nSPEED: ", speedT)

      escreva("\n\nSeu adversário é o MUDKIP\n\nMUDKIP\n\nSTATUS\nHP: ", hpM ,"\nATK: ", atkM ,"\nDEF: ", defM , "\nSPEED: ", speedM)


      escreva("\n\n\nTREECKO VS MUDKIP")

     

            
            escreva("\n\nA BATALHA VAI COMEÇAR, SE PREPAREEE")
            escreva("\n\nE COMEÇA O DUELO")
            
            escreva("\n\nO primeiro turno é seu\nVocê possui ", hpT, " pontos de vida")

            escreva("\n\nQual será seu primeiro movimento\n1 - ATACAR\n2 - CURAR\n\n")
            leia(mov)

	       
            se(mov == 1){
            	 ataqueT(mov, hpM, atkT, pokemon1, pokemon2)
            }
            se(mov == 2){
                 curarT(hpT, pokemon1)
            }
                 ataqueM(mov, hpT, atkM, pokemon1, pokemon2)
            
            

            enquanto(hpT > 0 e hpM > 0){
            	escreva("\n\nQual será seu próximo movimento\n1 - ATACAR\n2 - CURAR\n\n")
            leia(mov)

            se(mov == 1){
            	 ataqueT(mov, hpM, atkT, pokemon1, pokemon2)
            }
            se(mov == 2){
                 curarT(hpT, pokemon1)
              }
                 ataqueM(mov, hpT, atkM, pokemon1, pokemon2)
            }

	}
	funcao ataqueT(inteiro mov, inteiro &hpM, inteiro atkT, cadeia pokemon1, cadeia pokemon2){
	  inteiro sortM
            	inteiro sortatkT = Util.sorteia(0, 20)
            	se(sortatkT == 0){
            		escreva("\nO ataque de ", pokemon1, " não surtiu efeito algum e ", pokemon2, " ainda está com vida cheia")
            	}
            	se(sortatkT >= 1 e sortatkT <= 6){
            		escreva("\n", pokemon1, " fez um movimento de ataque, não teve tanta sorte e o dano total foi ", sortatkT, " de ataque.")
            		  escreva("\n\n", pokemon2, " não necessitou realizar movimento de defesa.") 
                       hpM = hpM - sortatkT
             	         escreva("\n", pokemon2, " está com ", hpM, " pontos de vida\n")  
                      
              }
              se(sortatkT >= 7 e sortatkT <= 13){
            		escreva("\n", pokemon1, " fez um movimento de ataque e conseguiu dar um dano considerável de ", sortatkT, " de ataque.")
            		 sortM = (Util.sorteia(6 , 10)/2)
            		  escreva("\n\n", pokemon2, " realizou um movimento de defesa anulando ", sortM/2, " pontos do ataque." ) 
                       hpM = hpM - sortatkT + (sortM/2)
                       se(hpM > 50){
                       	hpM = hpM - 50
                       	hpM = hpM + 50 - hpM                       	
                       }
                       	escreva("\nMudkip está com ", hpM, " pontos de vida\n")
              }
            	se(sortatkT >= 14  e sortatkT <= 20){
            		escreva("\n", pokemon1, " fez um movimento de ataque, levou muita sorte e deu um dano altíssimo de ", sortatkT, " de ataque.")	
                     sortM = (Util.sorteia(11, 15)/2)
                      escreva("\n\n", pokemon2, " realizou um movimento de defesa anulando ", sortM/2 , " de ataque." ) 
                        hpM = hpM - sortatkT + (sortM/2)
                        se(hpM > 50){
                       	hpM = hpM - 50
                       	hpM = hpM + 50 - hpM
                       }
                       	escreva("\n", pokemon2, " está com ", hpM, " pontos de vida\n")
             	}
	}
	funcao curarT(inteiro &hpT, cadeia pokemon1){
		inteiro sorthpT
	      escreva("\n\n", pokemon1, " tomou a decisão de curar o seu Pokémon\n", pokemon1, " poderá se curar em até 50% da sua vida máxima")
		se(hpT == 40){
			escreva("\n\n", pokemon1, " já está com a vida máxima. Você desperdiçou sua rodada") 
		}
	     se(hpT < 40){
	       sorthpT = Util.sorteia(0, 7)
	       se(sorthpT >= 1 e sorthpT <= 7){
	       	escreva("\n", pokemon1, "não levou tanta sorte e curou apenas ", sorthpT, " de sua vida")
	       	hpT = hpT + sorthpT
	       	se(hpT > 40){
	       		hpT = hpT - 40
	       		hpT = hpT + 40 - hpT    	
	       	}
	       	escreva("Após se curar, ", pokemon1, " ficou com ", hpT, " de vida")
	     }
	     se(hpT < 40){
	       sorthpT = Util.sorteia(0, 7)
	       se(sorthpT >= 8 e sorthpT <= 14){
	       	escreva("\n", pokemon1, " teve uma sorte considerável e recuperoou", sorthpT, " de sua vida")
	       	hpT = hpT + sorthpT
	       	se(hpT > 40){
	       		hpT = hpT - 40
	       		hpT = hpT + 40 - hpT    	
	       	}
	       	escreva("Após se curar, ", pokemon1, " ficou com ", hpT, " de vida")
	            }
	            se(hpT < 40){
	       sorthpT = Util.sorteia(0, 7)
	       se(sorthpT >= 8 e sorthpT <= 14){
	       	escreva("", pokemon1, "teve uma sorte considerável e recuperoou", sorthpT, " de sua vida")
	       	hpT = hpT + sorthpT
	       	se(hpT > 40){
	       		hpT = hpT - 40
	       		hpT = hpT + 40 - hpT    	
	       	}
	       	escreva("Após se curar, ", pokemon1, " ficou com ", hpT, " de vida")
	           }
              }
	      }
        }
	}

	funcao ataqueM(inteiro &hpT, inteiro atkM, inteiro defT, cadeia pokemon1, cadeia pokemon2){ 
		     hpT = 40
	 		inteiro sortT
            	inteiro sortatkM = Util.sorteia(0, 25)
            	se(sortatkM == 0){
            		escreva("\nO ataque de ", pokemon2 ," não surtiu efeito algum e ", pokemon1, " ainda está com vida cheia")
            	}
            	se(sortatkM >= 1 e sortatkM <= 8){
            		escreva("\n", pokemon2, " fez um movimento de ataque, não teve tanta sorte e o dano total foi ", sortatkM, " de ataque.")
            		  escreva("\n\n", pokemon1 ," não necessitou realizar movimento de defesa.") 
                       hpT = hpT - sortatkM
             	         escreva("\n", pokemon1, " está com ", hpT, " pontos de vida\n")  
                      
              }
              se(sortatkM >= 9 e sortatkM <= 16){
            		escreva("\n", pokemon2, " fez um movimento de ataque e conseguiu dar um dano considerável de ", sortatkM , " de ataque.")
            		 sortT = Util.sorteia(1 , 5)
            		  escreva("\n\n", pokemon1, " realizou um movimento de defesa anulando ", sortT, " pontos do ataque." ) 
                       hpT = hpT - sortatkM + sortT
                       se(hpT > 40){
                       	hpT = hpT - 40
                       	hpT = hpT + 40 - hpT                       	
                       }
                       	escreva("\n", pokemon1, " está com ", hpT, " pontos de vida\n")
              }
            	se(sortatkM >= 17  e sortatkM <= 25){
            		escreva("\n", pokemon2, " fez um movimento de ataque, levou muita sorte e deu um dano altíssimo de ", sortatkM, " de ataque.")	
                     sortT = Util.sorteia(6, 10)
                      escreva("\n\n", pokemon1, " realizou um movimento de defesa anulando ", sortT , " de ataque." ) 
                        hpT = hpT - sortatkM + sortT
                        se(hpT > 40){
                       	hpT = hpT - 40
                       	hpT = hpT + 40 - hpT
                       }
                       	escreva("\n", pokemon1, " está com ", hpT, " pontos de vida\n")
             	}
	} 
}
